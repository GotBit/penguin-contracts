/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITokenConverterInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_FACTORY()": FunctionFragment;
    "DEFAULT_ROUTER()": FunctionFragment;
    "WETH()": FunctionFragment;
    "convertChained(address[],uint256)": FunctionFragment;
    "convertTwoUniversal(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ROUTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertChained",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertTwoUniversal",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ROUTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertChained",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertTwoUniversal",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITokenConverter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITokenConverterInterface;

  functions: {
    DEFAULT_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    convertChained(
      _tokens: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amt: BigNumber }>;

    convertTwoUniversal(
      _tokenA: string,
      _tokenB: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT_FACTORY(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ROUTER(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  convertChained(
    _tokens: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertTwoUniversal(
    _tokenA: string,
    _tokenB: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_FACTORY(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ROUTER(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    convertChained(
      _tokens: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTwoUniversal(
      _tokenA: string,
      _tokenB: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DEFAULT_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    convertChained(
      _tokens: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTwoUniversal(
      _tokenA: string,
      _tokenB: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertChained(
      _tokens: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertTwoUniversal(
      _tokenA: string,
      _tokenB: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
