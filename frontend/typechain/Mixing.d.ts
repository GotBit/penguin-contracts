/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MixingInterface extends ethers.utils.Interface {
  functions: {
    "addMixToken(address,address)": FunctionFragment;
    "amounts(string)": FunctionFragment;
    "bank()": FunctionFragment;
    "calculateAmounts(string,address,uint256)": FunctionFragment;
    "disableToken(address)": FunctionFragment;
    "fulfill(bytes32,uint256)": FunctionFragment;
    "mintBatch(string,address[],uint256[],bool)": FunctionFragment;
    "mix()": FunctionFragment;
    "mixTokens(address)": FunctionFragment;
    "nft()": FunctionFragment;
    "nftOwner(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "probabilities(string)": FunctionFragment;
    "range(uint256,uint256,uint256)": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestIds(address)": FunctionFragment;
    "setBank(address)": FunctionFragment;
    "setProbability(string,uint256,uint256)": FunctionFragment;
    "setSlipage(uint256)": FunctionFragment;
    "setStable(address)": FunctionFragment;
    "setTokenConverter(address)": FunctionFragment;
    "shake(string,address,uint256)": FunctionFragment;
    "shakeETH(string,uint256)": FunctionFragment;
    "shakes(bytes32)": FunctionFragment;
    "slipage()": FunctionFragment;
    "stable()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMixToken",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "amounts", values: [string]): string;
  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateAmounts",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string, string[], BigNumberish[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(functionFragment: "mixTokens", values: [string]): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(functionFragment: "nftOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "probabilities",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "range",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "requestIds", values: [string]): string;
  encodeFunctionData(functionFragment: "setBank", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProbability",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlipage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokenConverter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shake",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shakeETH",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shakes", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "slipage", values?: undefined): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMixToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mixTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "probabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "range", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProbability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSlipage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shakeETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slipage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddedToken(uint256,address,address,address)": EventFragment;
    "ChangedBank(uint256,address,address)": EventFragment;
    "ChangedNFT(uint256,address,address)": EventFragment;
    "ChangedProbability(uint256,address,string,uint256,uint256)": EventFragment;
    "ChangedSlipage(uint256,address,uint256)": EventFragment;
    "ChangedStable(uint256,address,address)": EventFragment;
    "ChangedToken(uint256,address,address)": EventFragment;
    "ChangedTokenConverter(uint256,address,address)": EventFragment;
    "DefaultMinted(uint256,address,string,uint256)": EventFragment;
    "DisabledToken(uint256,address,address)": EventFragment;
    "Fulfilled(uint256,bytes32)": EventFragment;
    "Mixed(uint256,address,string,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Shaked(uint256,address,string,address,uint256,bytes32)": EventFragment;
    "SpecialMinted(uint256,address,string,uint256)": EventFragment;
    "Withdrawed(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedBank"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedProbability"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedSlipage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedStable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedTokenConverter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mixed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Shaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpecialMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawed"): EventFragment;
}

export type AddedTokenEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    timstamp: BigNumber;
    user: string;
    mixToken: string;
    swapToken: string;
  }
>;

export type ChangedBankEvent = TypedEvent<
  [BigNumber, string, string] & {
    timestamp: BigNumber;
    user: string;
    bank: string;
  }
>;

export type ChangedNFTEvent = TypedEvent<
  [BigNumber, string, string] & {
    timestamp: BigNumber;
    user: string;
    nft: string;
  }
>;

export type ChangedProbabilityEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    timestamp: BigNumber;
    user: string;
    rarity: string;
    a: BigNumber;
    b: BigNumber;
  }
>;

export type ChangedSlipageEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    timestamp: BigNumber;
    user: string;
    slipage: BigNumber;
  }
>;

export type ChangedStableEvent = TypedEvent<
  [BigNumber, string, string] & {
    timestamp: BigNumber;
    user: string;
    stable: string;
  }
>;

export type ChangedTokenEvent = TypedEvent<
  [BigNumber, string, string] & {
    timestamp: BigNumber;
    user: string;
    token: string;
  }
>;

export type ChangedTokenConverterEvent = TypedEvent<
  [BigNumber, string, string] & {
    timestamp: BigNumber;
    user: string;
    tokenConverter: string;
  }
>;

export type DefaultMintedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    timestamp: BigNumber;
    user: string;
    rarity: string;
    amount: BigNumber;
  }
>;

export type DisabledTokenEvent = TypedEvent<
  [BigNumber, string, string] & {
    timstamp: BigNumber;
    user: string;
    mixToken: string;
  }
>;

export type FulfilledEvent = TypedEvent<
  [BigNumber, string] & { timestamp: BigNumber; requestId: string }
>;

export type MixedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    timestamp: BigNumber;
    user: string;
    rarity: string;
    amount: BigNumber;
    special: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ShakedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, string] & {
    timestamp: BigNumber;
    user: string;
    rarity: string;
    mixToken: string;
    amount: BigNumber;
    requestId: string;
  }
>;

export type SpecialMintedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    timestamp: BigNumber;
    user: string;
    rarity: string;
    amount: BigNumber;
  }
>;

export type WithdrawedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    timestamp: BigNumber;
    user: string;
    token: string;
    amount: BigNumber;
  }
>;

export class Mixing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MixingInterface;

  functions: {
    addMixToken(
      mixToken: string,
      swapToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amounts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bank(overrides?: CallOverrides): Promise<[string]>;

    calculateAmounts(
      rarity: string,
      mixToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        mixTokenAmount: BigNumber;
      }
    >;

    disableToken(
      mixToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfill(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBatch(
      rarity: string,
      users: string[],
      amounts_: BigNumberish[],
      special: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mix(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mixTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean] & {
        token: string;
        symbol: string;
        decimals: BigNumber;
        swapToken: string;
        enable: boolean;
      }
    >;

    nft(overrides?: CallOverrides): Promise<[string]>;

    nftOwner(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    probabilities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }>;

    range(
      number: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestIds(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    setBank(
      bank_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProbability(
      rarity: string,
      a: BigNumberish,
      b: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlipage(
      slipage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStable(
      stable_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenConverter(
      tokenConverter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shake(
      rarity: string,
      mixToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shakeETH(
      rarity: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shakes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber, boolean] & {
        rarity: string;
        mixToken: string;
        amount: BigNumber;
        fulfilled: boolean;
        randomness: BigNumber;
        claimed: boolean;
      }
    >;

    slipage(overrides?: CallOverrides): Promise<[BigNumber]>;

    stable(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token_: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMixToken(
    mixToken: string,
    swapToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bank(overrides?: CallOverrides): Promise<string>;

  calculateAmounts(
    rarity: string,
    mixToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      tokenAmount: BigNumber;
      mixTokenAmount: BigNumber;
    }
  >;

  disableToken(
    mixToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfill(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBatch(
    rarity: string,
    users: string[],
    amounts_: BigNumberish[],
    special: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mix(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mixTokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean] & {
      token: string;
      symbol: string;
      decimals: BigNumber;
      swapToken: string;
      enable: boolean;
    }
  >;

  nft(overrides?: CallOverrides): Promise<string>;

  nftOwner(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  probabilities(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }>;

  range(
    number: BigNumberish,
    from: BigNumberish,
    to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestIds(arg0: string, overrides?: CallOverrides): Promise<string>;

  setBank(
    bank_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProbability(
    rarity: string,
    a: BigNumberish,
    b: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlipage(
    slipage_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStable(
    stable_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenConverter(
    tokenConverter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shake(
    rarity: string,
    mixToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shakeETH(
    rarity: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shakes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, BigNumber, boolean] & {
      rarity: string;
      mixToken: string;
      amount: BigNumber;
      fulfilled: boolean;
      randomness: BigNumber;
      claimed: boolean;
    }
  >;

  slipage(overrides?: CallOverrides): Promise<BigNumber>;

  stable(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token_: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMixToken(
      mixToken: string,
      swapToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    amounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bank(overrides?: CallOverrides): Promise<string>;

    calculateAmounts(
      rarity: string,
      mixToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        mixTokenAmount: BigNumber;
      }
    >;

    disableToken(mixToken: string, overrides?: CallOverrides): Promise<void>;

    fulfill(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      rarity: string,
      users: string[],
      amounts_: BigNumberish[],
      special: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    mix(overrides?: CallOverrides): Promise<void>;

    mixTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean] & {
        token: string;
        symbol: string;
        decimals: BigNumber;
        swapToken: string;
        enable: boolean;
      }
    >;

    nft(overrides?: CallOverrides): Promise<string>;

    nftOwner(to: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    probabilities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a: BigNumber; b: BigNumber }>;

    range(
      number: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestIds(arg0: string, overrides?: CallOverrides): Promise<string>;

    setBank(bank_: string, overrides?: CallOverrides): Promise<void>;

    setProbability(
      rarity: string,
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlipage(
      slipage_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStable(stable_: string, overrides?: CallOverrides): Promise<void>;

    setTokenConverter(
      tokenConverter_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shake(
      rarity: string,
      mixToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shakeETH(
      rarity: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shakes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber, boolean] & {
        rarity: string;
        mixToken: string;
        amount: BigNumber;
        fulfilled: boolean;
        randomness: BigNumber;
        claimed: boolean;
      }
    >;

    slipage(overrides?: CallOverrides): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token_: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedToken(uint256,address,address,address)"(
      timstamp?: BigNumberish | null,
      user?: string | null,
      mixToken?: null,
      swapToken?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { timstamp: BigNumber; user: string; mixToken: string; swapToken: string }
    >;

    AddedToken(
      timstamp?: BigNumberish | null,
      user?: string | null,
      mixToken?: null,
      swapToken?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { timstamp: BigNumber; user: string; mixToken: string; swapToken: string }
    >;

    "ChangedBank(uint256,address,address)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      bank?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; bank: string }
    >;

    ChangedBank(
      timestamp?: BigNumberish | null,
      user?: string | null,
      bank?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; bank: string }
    >;

    "ChangedNFT(uint256,address,address)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      nft?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; nft: string }
    >;

    ChangedNFT(
      timestamp?: BigNumberish | null,
      user?: string | null,
      nft?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; nft: string }
    >;

    "ChangedProbability(uint256,address,string,uint256,uint256)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      rarity?: null,
      a?: null,
      b?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        timestamp: BigNumber;
        user: string;
        rarity: string;
        a: BigNumber;
        b: BigNumber;
      }
    >;

    ChangedProbability(
      timestamp?: BigNumberish | null,
      user?: string | null,
      rarity?: null,
      a?: null,
      b?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        timestamp: BigNumber;
        user: string;
        rarity: string;
        a: BigNumber;
        b: BigNumber;
      }
    >;

    "ChangedSlipage(uint256,address,uint256)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      slipage?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { timestamp: BigNumber; user: string; slipage: BigNumber }
    >;

    ChangedSlipage(
      timestamp?: BigNumberish | null,
      user?: string | null,
      slipage?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { timestamp: BigNumber; user: string; slipage: BigNumber }
    >;

    "ChangedStable(uint256,address,address)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      stable?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; stable: string }
    >;

    ChangedStable(
      timestamp?: BigNumberish | null,
      user?: string | null,
      stable?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; stable: string }
    >;

    "ChangedToken(uint256,address,address)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      token?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; token: string }
    >;

    ChangedToken(
      timestamp?: BigNumberish | null,
      user?: string | null,
      token?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; token: string }
    >;

    "ChangedTokenConverter(uint256,address,address)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      tokenConverter?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; tokenConverter: string }
    >;

    ChangedTokenConverter(
      timestamp?: BigNumberish | null,
      user?: string | null,
      tokenConverter?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timestamp: BigNumber; user: string; tokenConverter: string }
    >;

    "DefaultMinted(uint256,address,string,uint256)"(
      timestamp?: BigNumberish | null,
      user?: null,
      rarity?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { timestamp: BigNumber; user: string; rarity: string; amount: BigNumber }
    >;

    DefaultMinted(
      timestamp?: BigNumberish | null,
      user?: null,
      rarity?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { timestamp: BigNumber; user: string; rarity: string; amount: BigNumber }
    >;

    "DisabledToken(uint256,address,address)"(
      timstamp?: BigNumberish | null,
      user?: string | null,
      mixToken?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timstamp: BigNumber; user: string; mixToken: string }
    >;

    DisabledToken(
      timstamp?: BigNumberish | null,
      user?: string | null,
      mixToken?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { timstamp: BigNumber; user: string; mixToken: string }
    >;

    "Fulfilled(uint256,bytes32)"(
      timestamp?: BigNumberish | null,
      requestId?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { timestamp: BigNumber; requestId: string }
    >;

    Fulfilled(
      timestamp?: BigNumberish | null,
      requestId?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { timestamp: BigNumber; requestId: string }
    >;

    "Mixed(uint256,address,string,uint256,uint256)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      rarity?: null,
      amount?: null,
      special?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        timestamp: BigNumber;
        user: string;
        rarity: string;
        amount: BigNumber;
        special: BigNumber;
      }
    >;

    Mixed(
      timestamp?: BigNumberish | null,
      user?: string | null,
      rarity?: null,
      amount?: null,
      special?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        timestamp: BigNumber;
        user: string;
        rarity: string;
        amount: BigNumber;
        special: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Shaked(uint256,address,string,address,uint256,bytes32)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      rarity?: null,
      mixToken?: null,
      amount?: null,
      requestId?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, string],
      {
        timestamp: BigNumber;
        user: string;
        rarity: string;
        mixToken: string;
        amount: BigNumber;
        requestId: string;
      }
    >;

    Shaked(
      timestamp?: BigNumberish | null,
      user?: string | null,
      rarity?: null,
      mixToken?: null,
      amount?: null,
      requestId?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, string],
      {
        timestamp: BigNumber;
        user: string;
        rarity: string;
        mixToken: string;
        amount: BigNumber;
        requestId: string;
      }
    >;

    "SpecialMinted(uint256,address,string,uint256)"(
      timestamp?: BigNumberish | null,
      user?: null,
      rarity?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { timestamp: BigNumber; user: string; rarity: string; amount: BigNumber }
    >;

    SpecialMinted(
      timestamp?: BigNumberish | null,
      user?: null,
      rarity?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { timestamp: BigNumber; user: string; rarity: string; amount: BigNumber }
    >;

    "Withdrawed(uint256,address,address,uint256)"(
      timestamp?: BigNumberish | null,
      user?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { timestamp: BigNumber; user: string; token: string; amount: BigNumber }
    >;

    Withdrawed(
      timestamp?: BigNumberish | null,
      user?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { timestamp: BigNumber; user: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addMixToken(
      mixToken: string,
      swapToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bank(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAmounts(
      rarity: string,
      mixToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableToken(
      mixToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfill(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBatch(
      rarity: string,
      users: string[],
      amounts_: BigNumberish[],
      special: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mix(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mixTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    nftOwner(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    probabilities(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    range(
      number: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setBank(
      bank_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProbability(
      rarity: string,
      a: BigNumberish,
      b: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlipage(
      slipage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStable(
      stable_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenConverter(
      tokenConverter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shake(
      rarity: string,
      mixToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shakeETH(
      rarity: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shakes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    slipage(overrides?: CallOverrides): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token_: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMixToken(
      mixToken: string,
      swapToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateAmounts(
      rarity: string,
      mixToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableToken(
      mixToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfill(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      rarity: string,
      users: string[],
      amounts_: BigNumberish[],
      special: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mix(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mixTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftOwner(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    probabilities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    range(
      number: BigNumberish,
      from: BigNumberish,
      to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBank(
      bank_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProbability(
      rarity: string,
      a: BigNumberish,
      b: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlipage(
      slipage_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStable(
      stable_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConverter(
      tokenConverter_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shake(
      rarity: string,
      mixToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shakeETH(
      rarity: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shakes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slipage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token_: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
