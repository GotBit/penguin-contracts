/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Mercle, MercleInterface } from "../Mercle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "verify",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040527f6a6f7061000000000000000000000000000000000000000000000000000000006000557f706f70610000000000000000000000000000000000000000000000000000000060015534801561005857600080fd5b50610123806100686000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063fc735e9914602d575b600080fd5b60336047565b604051603e9190608f565b60405180910390f35b60008054600154604051602001605d92919060c5565b60405160208183030381529060405280519060200120905090565b6000819050919050565b6089816078565b82525050565b600060208201905060a260008301846082565b92915050565b6000819050919050565b60bf60bb826078565b60a8565b82525050565b600060cf828560b2565b60208201915060dd828460b2565b602082019150819050939250505056fea264697066735822122060b054a7bd15ed0ab3d78bea3b8d17c978a0c68c57cee307d35b4cdf71d3c42f64736f6c634300080b0033";

export class Mercle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Mercle> {
    return super.deploy(overrides || {}) as Promise<Mercle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Mercle {
    return super.attach(address) as Mercle;
  }
  connect(signer: Signer): Mercle__factory {
    return super.connect(signer) as Mercle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MercleInterface {
    return new utils.Interface(_abi) as MercleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Mercle {
    return new Contract(address, _abi, signerOrProvider) as Mercle;
  }
}
